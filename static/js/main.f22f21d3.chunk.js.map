{"version":3,"sources":["components/Quote.js","components/Button.js","components/SiteHeading.js","components/SiteFooter.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","id","quote","author","Component","Button","className","onClick","clicked","href","link","target","linkTarget","icon","text","SiteHeading","_ref","src","alt","displayName","SiteFooter","App","_this","state","getQuote","bind","assertThisInitialized","xmlr","XMLHttpRequest","onreadystatechange","readyState","status","test","JSON","parse","responseText","setState","open","send","_this2","web","from","opacity","to","config","delay","duration","style","components_SiteHeading","native","items","enter","leave","display","item","div","components_Quote","components_Button","concat","components_SiteFooter","Boolean","window","location","hostname","match","onload","document","getElementById","classList","add","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f22f21d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Quote extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n       }\r\n\r\n    render() {\r\n        return (\r\n        \t<div>\r\n                <p id=\"text\">\"{this.props.quote}\"</p>\r\n                <strong><p id=\"author\">{this.props.author}</p></strong>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Quote;\r\n\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <a id={this.props.id} className=\"btn btn-primary\" onClick={this.props.clicked} href={this.props.link} target={this.props.linkTarget}>\r\n                  <span className=\"icons\">\r\n                    <i className={this.props.icon} />\r\n                  </span>\r\n                 {this.props.text}\r\n                </a>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Button;\r\n\r\n","import React from 'react';\r\n\r\nconst SiteHeading = ({ className }) => {\r\n    return (\r\n        <header>\r\n              <img id=\"site-logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/4/44/Logo_The_Simpsons.svg\" alt=\"The Simpsons logo\"/>\r\n              <h1 id=\"site-heading\">Random Quote Generator</h1>\r\n            </header>\r\n    );\r\n};\r\n\r\nSiteHeading.displayName = 'SiteHeading';\r\n\r\nexport default SiteHeading;\r\n","import React from 'react';\r\n\r\nconst SiteFooter = ({ className }) => {\r\n    return (\r\n        <footer>\r\n            &copy; 2019 David Andrews\r\n            <br />\r\n            Free API kindly provided by Jason Luboff\r\n            </footer>\r\n    );\r\n};\r\n\r\nSiteFooter.displayName = 'SiteFooter';\r\n\r\nexport default SiteFooter;\r\n","import React, { Component } from 'react';\nimport { Spring } from 'react-spring';\nimport { Transition, animated } from 'react-spring';\nimport Quote from './components/Quote';\nimport Button from './components/Button';\nimport SiteHeading from './components/SiteHeading';\nimport SiteFooter from './components/SiteFooter'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          quote: '',\n          author: ''\n        }\n        this.getQuote = this.getQuote.bind(this);\n        this.getQuote();\n    }\n\n    getQuote(){\n      var xmlr = new XMLHttpRequest();\n      xmlr.onreadystatechange = function(){\n          if(xmlr.readyState == 4 && xmlr.status == 200){\n            var test = JSON.parse(xmlr.responseText);\n            this.setState({quote : test[0]['quote'], author : test[0]['character']})\n          };\n      }.bind(this);\n      xmlr.open(\"GET\", \"https://thesimpsonsquoteapi.glitch.me/quotes\", true);\n      xmlr.send();\n    }\n\n    render() {\n\n        return (\n          <Spring from={{ opacity: 0 }} to={{ opacity: 1 }} config={{ delay: 1000, duration: 500 }}>\n            {props =>\n              <div id=\"quote-box\" style={props} className=\"container\">\n                <SiteHeading />\n                <main>\n                    <div id=\"quote\">\n                      <Transition\n                      native\n                      items={this.state.quote}\n                      from={{ opacity: 0 }}\n                      enter={{ opacity: 1 }}\n                      leave={{ display: 'none' }}\n                      config={{ duration: 250 }}\n                      >\n                        {item =>\n                         (props => (\n                            <animated.div style={props}>\n                              <Quote quote={this.state.quote} author={this.state.author} />\n                            </animated.div>\n                            ))\n                        }\n                    </Transition>\n                  </div>\n                  <div id=\"buttons\">\n                    <Button id=\"new-quote\" clicked={this.getQuote} icon=\"fas fa-quote-right\" text=\"Next Quote\" />\n                    <Button id=\"tweet-quote\" icon=\"fab fa-twitter\" text=\"Tweet Quote\" link={`https://twitter.com/intent/tweet?text=\"${this.state.quote}\" ${this.state.author}`} linkTarget=\"_blank\" />\n                  </div>\n                </main>\n                <SiteFooter />\n              </div>\n            }\n          </Spring>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.onload = () => {\n\tdocument.getElementById('root').classList.add('unhide');\n\tReactDOM.render(<App />, document.getElementById('root'));\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}